import sys
import argparse
from class_emg_ebc import Processing_EMG
import numpy as np
import pandas as pd
import scipy.io
import matplotlib.pyplot as plt

def on_press(event):
    # print('press', event.key)
    sys.stdout.flush()
    
    if event.key == 'x':
        plt.close('all')
    else:
        pass
            
    return 0

def plotEMG(emg_times, emg_signals, emg_names, num_session):
    num_signals = len(emg_signals)
    ## we exclude Time channel and Swich channel (first and last channels)
    fig, ax = plt.subplots(nrows=num_signals, ncols=1, sharex=True, sharey=True)
    fig.canvas.mpl_connect('key_press_event', on_press)
    cont=0
    for time, signal, name in zip(emg_times, emg_signals, emg_names):
        ax[cont].plot(time, signal, label=name)
        ax[cont].legend()
        cont+=1
    
    ax[0].set_ylim([-500,500])
    ax[0].set_title('session '+str(num_session))
    ax[cont-1].set_xlabel('Time [s]')
    
    return 0

def main():
    
    # Initialize parser
    parser = argparse.ArgumentParser(description = 'EMG visualization')

    # Adding optional argument
    parser.add_argument('-s', '--session', type = int, help = "Select one SESSION among: 1, 7, and 14")
    parser.add_argument('-r','--recording', type = str, help='Select one RECORDING among: b1, e1, e2, e3, b2 (baseline1, 2min-, 15min-, and 30min-pedaling, baseline2)')
    parser.add_argument('-m','--muscle', type = str, help='Select one MUSCLE among: grt, glt, tbart, tbalt, vlrt, vllt, vmrt, vmlt')

    ## Read arguments from command line
    args = parser.parse_args()

    # session = int(args[1]) ## [1,7,14]
    # num_file = int(args[2]) ## [0,1,2,3,4]-> (baseline_start, e1,e2,e2, baseline_end)
    
    session = args.session
    if  session == 1:
        path='../data/emg_noraxon/matlab/s01/'
        files=['EBC040S1-Baseline1.mat','EBC040S1e1.mat','EBC040S1e2.mat','EBC040S1e3.mat', 'EBC040S1-Baseline2.mat']
    elif session == 7:
        path='../data/emg_noraxon/matlab/s07/'
        files=['EBC040_S7_BASELINE1.mat','EBC040_S7_E1.mat','EBC040_S7_E2.mat','EBC040_S7_E3.mat','EBC040_S7_BASELINE.mat']
    elif session == 14:
        path='../data/emg_noraxon/matlab/s14/'
        files=['EBC_Bed_cycling_Baseline.mat','EBC_Bed_cycling-s14-Baseline.mat','EBC040_Bed_cycling-S14.mat','EBC040_Bed_cycling-s14-5min.mat','EBC040-_Bed_cycling_-s14-15m.mat','EBC040_Bed_cycling-s14-30min.mat']
    else:
        print(f'The {session} session was not found.')
        return 0
        
    recording = args.recording
    if recording == 'b1':
        num_file=0
    elif recording == 'e1':
        num_file=1
    elif recording == 'e2':
        num_file=2
    elif recording == 'e3':
        num_file=3
    elif recording == 'b2':
        num_file=4
    else:
        pass
        # print(f'The {recording} recording was not found.')
        # return 0
        
    muscle = args.muscle
    if muscle == 'grt':
        num_muscle=5
    elif muscle == 'glt':
        num_muscle=2
    elif muscle == 'tbart':
        num_muscle=0
    elif muscle == 'tbalt':
        num_muscle=4
    elif muscle == 'vlrt':
        num_muscle=7
    elif muscle == 'vllt':
        num_muscle=1
    elif muscle == 'vmrt':
        num_muscle=3
    elif muscle == 'vmlt':
        num_muscle=6
    else:
        pass
        # print(f'The {muscle} muscle was not found.')
        # return 0
    
    ## EMG early bed cycling (EBC) from .mat file (matlab file) generated by Noraxon software.
    ## Each file has several channels.
    ## We read the data in the class 'Processing_EMG'.
    ## We create an object (obj_emg) for a selected file.
    
    
    if muscle==None:
        obj_emg = Processing_EMG(path,files[num_file])
        obj_emg.plotEMG()
    else:
        print(f'Plot of {muscle} muscle response during the five recordings of session {session}')
        list_objs = []
        ## read emg-signals from all recordings of a selected session
        for filename in files:
            list_objs.append(Processing_EMG(path,filename))
        ## plot emg-signals selected muscle
        list_emg_times=[]
        list_emg_signals=[]
        list_emg_names=[]
        for obj_emg in list_objs:
            emg_time, emg_signal, emg_name = obj_emg.getSignal(num_muscle)
            list_emg_times.append(emg_time)
            list_emg_signals.append(emg_signal)
            list_emg_names.append(emg_name)
        # print(list_emg_names)
        plotEMG(list_emg_times, list_emg_signals, list_emg_names, session)

    plt.ion()
    plt.show(block=True)
    
    # obj_emg.plotPowerSpectrum()   
    
    ## Window size in mili-seconds (ms).
    ## Recommended values for window_size: between 50 and 100 ms.

    # ## Smoothing RMS 
    # window_size=50 # ms
    # obj_emg.smoothingRMS(window_size)
    # obj_emg.plotEMG_smoothed()

    

    
    return 0

if __name__ == '__main__':
    sys.exit(main())
